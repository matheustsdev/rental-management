generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id                      String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                    String         @db.VarChar(255)
  created_at              DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?      @db.Timestamptz(6)
  deleted                 Boolean?       @default(false)
  deleted_at              DateTime?      @db.Timestamptz(6)
  post_return_buffer_days Int?           @default(0)
  measure_type            measures_type?
  products                products[]
}

model products {
  id                  String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reference           String          @db.VarChar(100)
  description         String?
  receipt_description String?
  category_id         String?         @db.Uuid
  price               Decimal         @db.Decimal(10, 2)
  created_at          DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?       @db.Timestamptz(6)
  deleted             Boolean?        @default(false)
  deleted_at          DateTime?       @db.Timestamptz(6)
  categories          categories?     @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rent_products       rent_products[]
}

model rent_products {
  id                        String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rent_id                   String        @db.Uuid
  product_id                String        @db.Uuid
  product_price             Decimal       @db.Decimal(10, 2)
  product_description       String
  created_at                DateTime?     @default(now()) @db.Timestamptz(6)
  actual_return_buffer_days Int?
  actual_return_date        DateTime?     @db.Date
  bust                      Decimal?      @db.Decimal
  waist                     Decimal?      @db.Decimal
  hip                       Decimal?      @db.Decimal
  shoulder                  Decimal?      @db.Decimal
  sleeve                    Decimal?      @db.Decimal
  height                    Decimal?      @db.Decimal
  back                      Decimal?      @db.Decimal
  measure_type              measures_type
  products                  products      @relation(fields: [product_id], references: [id], onUpdate: NoAction)
  rents                     rents         @relation(fields: [rent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([rent_id, product_id])
  @@index([product_id], map: "idx_rent_products_product_id")
  @@index([rent_id], map: "idx_rent_products_rent_id")
}

model rents {
  id                    String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at            DateTime?           @default(now()) @db.Timestamptz(6)
  rent_date             DateTime            @db.Date
  return_date           DateTime?           @db.Date
  client_name           String              @db.VarChar(255)
  address               String?
  phone                 String?             @db.VarChar(20)
  total_value           Decimal             @db.Decimal(10, 2)
  discount_type         discount_type_enum?
  discount_value        Decimal?            @default(0) @db.Decimal(10, 2)
  signal_value          Decimal?            @default(0) @db.Decimal(10, 2)
  remaining_value       Decimal?            @db.Decimal(10, 2)
  deleted               Boolean?            @default(false)
  deleted_at            DateTime?           @db.Timestamptz(6)
  updated_at            DateTime?           @default(now()) @db.Timestamptz(6)
  internal_observations String?
  receipt_observations  String?
  code                  Decimal             @default(dbgenerated("nextval('rents_code_seq'::regclass)")) @db.Decimal
  rent_products         rent_products[]

  @@index([client_name], map: "idx_rents_client_name")
  @@index([rent_date], map: "idx_rents_rent_date")
}

enum availability_status {
  AVAILABLE
  UNAVAILABLE
  BUFFER_OCCUPIED
}

enum discount_type_enum {
  PERCENTAGE
  FIXED
}

enum measures_type {
  SUIT
  DRESS
}
